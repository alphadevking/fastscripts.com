from fastapi import APIRouter, Depends, HTTPException
from fastapi.security.oauth2 import OAuth2PasswordBearer
from httpx import AsyncClient
from typing import List
import os
from dotenv import load_dotenv

router = APIRouter()

load_dotenv()

# Spotify API credentials
CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")
REDIRECT_URI = os.getenv("SPOTIFY_REDIRECT_URI")

# Spotify API endpoints
SPOTIFY_AUTH_URL = "https://accounts.spotify.com/authorize"
SPOTIFY_TOKEN_URL = "https://accounts.spotify.com/api/token"
SPOTIFY_API_BASE_URL = "https://api.spotify.com/v1"

# OAuth2
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


# Define a function to get Spotify access token
async def get_spotify_access_token():
    # Implement your logic to retrieve or refresh access token here
    # This could involve using the Spotify Authorization Code Flow
    # See https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow

    # Return the access token as a string
    return "your_access_token"


@router.get("/get-model")
async def get_model():
    return {f'Hello'}

@router.get("/generate_playlist/")
async def generate_playlist(access_token: str = Depends(get_spotify_access_token)):
    async with AsyncClient() as client:
        # Make requests to the Spotify API using the provided access token
        headers = {
            "Authorization": f"Bearer {access_token}"
        }

        # Example: Create a playlist using Spotify API
        playlist_data = {
            "name": "My Personalized Playlist",
            "description": "A playlist generated by FastAPI",
            "public": False  # Set to True if you want the playlist to be public
        }

        create_playlist_response = await client.post(
            f"{SPOTIFY_API_BASE_URL}/users/{user_id}/playlists",
            headers=headers,
            json=playlist_data
        )

        if create_playlist_response.status_code != 201:
            raise HTTPException(
                status_code=create_playlist_response.status_code,
                detail="Failed to create playlist"
            )

        playlist_id = create_playlist_response.json()["id"]

        # Example: Add tracks to the playlist
        tracks_to_add = [
            "spotify:track:track_id_1",
            "spotify:track:track_id_2"
            # Add more track URIs as needed
        ]

        add_tracks_response = await client.post(
            f"{SPOTIFY_API_BASE_URL}/playlists/{playlist_id}/tracks",
            headers=headers,
            json={"uris": tracks_to_add}
        )

        if add_tracks_response.status_code != 201:
            raise HTTPException(
                status_code=add_tracks_response.status_code,
                detail="Failed to add tracks to the playlist"
            )

        return {"message": "Playlist generated successfully", "playlist_id": playlist_id}
    